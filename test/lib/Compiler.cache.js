// Generated by CoffeeScript 1.6.3
(function() {
  var Compiler, dir, expect, fs, loadFile, path;

  expect = require('chai').expect;

  fs = require('fs');

  path = require('path');

  Compiler = require('../../lib/Compiler');

  dir = path.resolve(__dirname + '/../data');

  loadFile = function(_path) {
    return fs.readFileSync(dir + '/' + _path, {
      encoding: 'utf8'
    });
  };

  describe('Compiler.cache', function() {
    beforeEach(function() {
      return Compiler.setCache(dir + '/cache');
    });
    afterEach(function() {
      var file;
      Compiler.cache = null;
      file = dir + '/cache/__' + Compiler.CACHE_NAMESPACE + '.json';
      if (fs.existsSync(file)) {
        return fs.unlinkSync(file);
      }
    });
    it('should be null when coffee file is not in cache', function() {
      return expect(Compiler.cache.load(dir + '/coffee/simple.coffee')).to.be["null"];
    });
    it('should save compiled coffee file to cache', function(done) {
      return Compiler.compileFile(dir + '/coffee/simple.coffee').then(function(data) {
        expect(Compiler.cache.load(dir + '/coffee/simple.coffee')).to.be.equal("(function() {\n  var message;\n\n  message = 'hello';\n\n}).call(this);\n");
        return done();
      }).done();
    });
    it('should load compiled coffee file from cache', function(done) {
      return Compiler.compileFile(dir + '/coffee/simple.coffee').then(function(data) {
        return Compiler.compileFile(dir + '/coffee/simple.coffee').then(function(data) {
          expect(data).to.be.equal("(function() {\n  var message;\n\n  message = 'hello';\n\n}).call(this);\n");
          return done();
        }).done();
      }).done();
    });
    it('should not save less file to cache', function(done) {
      return Compiler.compileFile(dir + '/less/simple.less').then(function(data) {
        expect(Compiler.cache.load(dir + '/less/simple.less')).to.be["null"];
        return done();
      }).done();
    });
    return it('should save less file to cache if dependents are defined', function(done) {
      return Compiler.compileFile(dir + '/less/simple.less', {
        dependents: []
      }).then(function(data) {
        expect(Compiler.cache.load(dir + '/less/simple.less')).to.be.equal('body {\n  color: #ff0000;\n}\n');
        return done();
      }).done();
    });
  });

}).call(this);
