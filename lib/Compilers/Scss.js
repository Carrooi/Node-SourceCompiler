// Generated by CoffeeScript 1.6.3
(function() {
  var CompileException, Compiler, Q, Scss, SyntaxException, path, sass, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Q = require('q');

  path = require('path');

  sass = require('node-sass');

  Compiler = require('./Compiler');

  SyntaxException = require('../Exceptions/SyntaxException');

  CompileException = require('../Exceptions/CompileException');

  Scss = (function(_super) {
    __extends(Scss, _super);

    function Scss() {
      _ref = Scss.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Scss.prototype.isCachableWithDependencies = function() {
      return true;
    };

    Scss.prototype.getMinifier = function() {
      return 'css';
    };

    Scss.prototype.parse = function(data, options) {
      var deferred, setup,
        _this = this;
      if (options == null) {
        options = {};
      }
      deferred = Q.defer();
      setup = {
        data: data,
        success: function(css) {
          return deferred.resolve(css);
        },
        error: function(err) {
          return deferred.reject(_this.parseError(err, options.path));
        }
      };
      if (options.path !== null) {
        setup.includePaths = [path.dirname(options.path)];
      }
      sass.render(setup);
      return deferred.promise;
    };

    Scss.prototype.parseError = function(error, _path) {
      var data, e;
      data = error.match(/^source\sstring\:(\d+)\:\serror\:\s(.*)/);
      if (data[2].match(/^file\sto\simport\snot\sfound\sor\sunreadable/)) {
        e = new CompileException(data[2]);
      } else {
        e = new SyntaxException(data[2]);
      }
      e.filename = _path;
      e.line = parseInt(data[1]);
      return e;
    };

    return Scss;

  })(Compiler);

  module.exports = Scss;

}).call(this);
