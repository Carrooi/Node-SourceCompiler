// Generated by CoffeeScript 1.6.3
(function() {
  var Compiler, cleanCss, htmlMinifier, uglify;

  uglify = require('uglify-js');

  cleanCss = require('clean-css');

  htmlMinifier = require('html-minifier').minify;

  Compiler = (function() {
    function Compiler() {}

    Compiler.prototype.isCachableWithDependencies = function() {
      return false;
    };

    Compiler.prototype.getMinifier = function() {
      throw new Error('Method getMinifier is not implemented.');
    };

    Compiler.prototype.parse = function(data, options) {
      if (options == null) {
        options = {};
      }
      throw new Error('Method parse is not implemented.');
    };

    Compiler.prototype.parseError = function(error, path) {
      throw new Error('Method parseError is not implemented.');
    };

    Compiler.minify = {
      uglify: function(data) {
        return uglify.minify(data, {
          fromString: true
        }).code;
      },
      cleanCss: function(data) {
        return cleanCss.process(data);
      },
      html: function(data) {
        data = htmlMinifier(data, {
          removeComments: true,
          removeCommentsFromCDATA: true,
          removeCDATASectionsFromCDATA: true,
          collapseWhitespace: true,
          collapseBooleanAttributes: true,
          removeRedundantAttributes: true,
          removeEmptyAttributes: true
        });
        return data;
      }
    };

    Compiler.jquerify = {
      precompiled: function(data) {
        return "function (values, data) {\n					   var $ = jQuery, result = $();\n					   values = $.makeArray(values);\n					   data = data || {};\n					   for (var i=0; i < values.length; i++) {\n						   var value = $.extend({}, values[i], data, {index: i});\n						   var elem  = $((" + data + ")(value));\n						   elem.data('item', value);\n						   $.merge(result, elem);\n					   }\n					   return result;\n};";
      },
      compiled: function(data) {
        data = data.replace(/\'/g, "\\'");
        data = data.replace(/\n/g, "' +\n'");
        data = data.replace(/[\s\+]+$/, '');
        return "(function() {\n$('" + data + "');\n}).call(this);";
      }
    };

    return Compiler;

  })();

  module.exports = Compiler;

}).call(this);
