// Generated by CoffeeScript 1.6.3
(function() {
  var CompileException, Compiler, Less, Q, SyntaxException, less, path, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Q = require('q');

  path = require('path');

  less = require('less');

  Compiler = require('./Compiler');

  CompileException = require('../Exceptions/CompileException');

  SyntaxException = require('../Exceptions/SyntaxException');

  Less = (function(_super) {
    __extends(Less, _super);

    function Less() {
      _ref = Less.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Less.prototype.isCachableWithDependencies = function() {
      return true;
    };

    Less.prototype.getMinifier = function() {
      return 'css';
    };

    Less.prototype.parse = function(data, options) {
      var deferred, err, setup,
        _this = this;
      if (options == null) {
        options = {};
      }
      setup = {
        optimization: 1,
        rootpath: '',
        relativeUrls: false,
        strictImports: false
      };
      if (options.path !== null) {
        setup.paths = [path.dirname(options.path)];
        setup.filename = options.path;
      }
      if (options.debug === true) {
        setup.dumpLineNumbers = 'mediaquery';
      }
      deferred = Q.defer();
      try {
        less.render(data, setup, function(err, data) {
          if (err) {
            return deferred.reject(_this.parseError(err, options.path));
          } else {
            return deferred.resolve(data);
          }
        });
      } catch (_error) {
        err = _error;
        deferred.reject(this.parseError(err, options.path));
      }
      return deferred.promise;
    };

    Less.prototype.parseError = function(error, _path) {
      var e;
      if (error.type === 'File') {
        e = new CompileException(error.message);
      } else {
        e = new SyntaxException(error.message);
      }
      e.filename = _path;
      e.line = error.line;
      e.column = error.column;
      e.type = error.type;
      return e;
    };

    return Less;

  })(Compiler);

  module.exports = Less;

}).call(this);
