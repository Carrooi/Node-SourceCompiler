// Generated by CoffeeScript 1.6.3
(function() {
  var CompileException, Compiler, InvalidArgumentException, Q, Ts, exec, fs, path, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Q = require('q');

  path = require('path');

  exec = require('child_process').exec;

  fs = require('fs');

  Compiler = require('./Compiler');

  InvalidArgumentException = require('../Exceptions/InvalidArgumentException');

  CompileException = require('../Exceptions/CompileException');

  Ts = (function(_super) {
    __extends(Ts, _super);

    function Ts() {
      _ref = Ts.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Ts.prototype.getMinifier = function() {
      return 'uglify';
    };

    Ts.prototype.parse = function(data, options) {
      var deferred, dir, fileName, name, ts,
        _this = this;
      if (options == null) {
        options = {};
      }
      if (options.path === null) {
        return Q.reject(new InvalidArgumentException('You have to set path for compiling typescript'));
      }
      deferred = Q.defer();
      dir = path.dirname(options.path);
      name = path.basename(options.path, path.extname(options.path));
      fileName = "" + dir + "/" + name + ".js";
      ts = path.resolve("" + __dirname + "/../../node_modules/typescript/bin/tsc.js");
      exec("node " + ts + " " + options.path, function(err, stdout, stderr) {
        if (err) {
          return deferred.reject(_this.parseError(err, options.path));
        } else {
          return fs.readFile(fileName, 'utf-8', function(err, content) {
            fs.unlink(fileName);
            if (err) {
              return deferred.reject(err);
            } else {
              return deferred.resolve(content);
            }
          });
        }
      });
      return deferred.promise;
    };

    Ts.prototype.parseError = function(error, _path) {
      var e;
      e = new CompileException(error.message.replace(/^Command\sfailed\:\s/, ''));
      e.filename = _path;
      return e;
    };

    return Ts;

  })(Compiler);

  module.exports = Ts;

}).call(this);
